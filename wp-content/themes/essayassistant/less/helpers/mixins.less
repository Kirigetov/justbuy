/*
-example of adding fonts to css
  .font(helvetica-medium, HelveticaNeue-Medium);
_________________________________________________________

-short form for use font on page
  .mr(){
    font-family: "montserrat-reg", Arial, sans-serif;
  }

-example of using padding, margin mixins with media queries
  .page-content{
    .padding(@max-lg, 60px, 0);
    .margin(@max-lg, 15px, 0, 20px);
  }

-example of creating own columns
  .columns(4);

      Output:
      .column-1 {
        width: 25%;
      }
        .....

      .column-4 {
        width: 100%;
      }

-example of creating own columns
  .items(step, @color-set, 4);

*/

.border-radius(@r: 6px) {
  -webkit-border-radius: @r;
  -moz-border-radius: @r;
  border-radius: @r;
}

.box-shadow(@x: 0, @y: 8px, @blur: 16px, @color: rgba(45, 42, 38, 0.2)){
  -webkit-box-shadow: @arguments;
  box-shadow: @arguments;
}

.clr {
  *zoom: 1;
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}


.font(@alias, @name) {
  @font-face {
    font-family: @alias;
    src: url("./css/fonts/@{name}.woff2") format("woff2"), url("./css/fonts/@{name}.woff") format("woff");
    font-weight: normal;
    font-style: normal;
  }
}


//Mixins with Multiple Parameters
//You can use this plugin but you must input required number of params
.padding(@x; @y) {
  padding: @x @y;
}

.padding(@x0; @y0; @x1; @y1) {
  padding: @x0; @y0; @x1; @y1;
}

.padding(@media-size; @x; @y; @z) {
  @media @media-size {
    padding: @x @y @z;
  }
}

.padding(@media-size; @x; @y) {
  @media @media-size {
    padding: @x @y;
  }
}

//margin mixins
.margin(@x; @y) {
  margin: @x @y;
}

.margin(@media-size; @x; @y) {
  @media @media-size {
    margin: @x @y;
  }
}

.margin(@media-size; @x; @y; @z) {
  @media @media-size {
    margin: @x @y @z;
  }
}

.f(@size) {
  font-size: @size;
}

//if adding font weight
.f(@size; @weight) {
  font-size: @size;
  font-weight: @weight;
}

//for creating own columns or the same blocks
.columns(@n, @i: 1) when (@i =< @n) {
  .column-@{i} {
    width: (@i * 100% / @n);
  }
  .columns(@n, (@i + 1));
}

//for output same blocks like in 'how-it-work' section
.items(@icon, @color, @n, @i: 1) when (@i =< @n) {
  &__img_step@{i} {
    background-color: extract(@color, @i); // from the array takes out one item at a time

    @val: '@{icon}@{i}'; // concat 2 variables for transfer to a sprite mixin

    &:before{
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      .png(@@val);
    }
  }

  .items(@icon, @color, @n, (@i + 1));
}
